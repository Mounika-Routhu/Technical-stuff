----------------------INTRO to JEST-------------------------------
JEST : Jest is a JavaScript Testing Framework. It is a test runner which 
 => finds test
 => runs tests
 => determine whether test pass or fail

JEST identifies test files with ext ".test.js" in our whole directory.

JEST takes any error as failure. so en empty test case will pass

JEST comes with create-react-app

find more @ https://jestjs.io/

------------------INTRO to REACT TESTING LIBRARY---------------

REACT TESTING LIBRARY: This is for testing React components.
=> renders and searches VIRTUAL DOM, testing-library/react
=> provides DOM matchers for assertion(statement), testing-library/jest-dom
=> interacts with virtual dom. i.e, simulates user events, testing-library/user-events

Testing library,setupTests.js comes with create-react-app
this js file imports(setups) testing-library/jest-dom, to make DOM matchers available to the project.

----------------STRCTURE of TEST case------------------

for testing any component we have to create <fileName-toBe-tested>.test.js file
eg: for App.js ==> App.test.js
any test has 3 parts

ARRANGE => render virtual DOM, using render method

ACAQUIRE => get element by screen, similar to document.body

ACT => simulate user action

ASSERTION => validate with condition

---------------examlpe of TEST case and explanation------------------------

test is JEST global method which take 2 args, 
=> message
=> anonymous func which does actual testing

render => renders virtual DOM which takes JSX arugument(component)

screen => is like document in JS, it has methods on to access get elements from virtual DOM and takes an argument to specify element

expect => jest global method which starts assertion and takes element(subject of assertion) as an arg.

matchers => type of assertion, which tests the element against certain condition and takes a argumet to refine matcher at times.

eg: 

import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  //ARRANGE
  render(<App />);

  //ASSERT
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

--------------------WATCH MODE-----------------------------------

To runs tests  => npm test, which is an npm script this runs JEST in watch mode

watch mode watches any changes(file changes) since last commit
and runs all test in that file, eventhough some other tests in that file are commited
if there are changes, by running npm test it runs tests atomatically.
if there are no changes then it won't run any tests. 
to run all tests ==> type a

--------------------- QUERIES, ROLES and matchers---------------------------------

screen Queries are the methods that Testing Library gives you to find elements on the page(screen). There are several types of queries 

stucture of query => command[All]ByQueryType ==> eg: getByRole

command:
"get" => expect element to be in DOM, gives error if not found
"query" => expect element not to be in DOM, gives null if not found
"find" => expect element to appear asynchronously, gives promise

[All]
exclude when expect only one match
inlcude when expect more than one match

QueryType
=> Role (most preferred, bcz it ensures accessibility)
=> AltText (imgs)
=> Text (display elements which are non interactive, doesn't have a specific role and are static)
=> for Form Elements we have PlaceholderText, LabelText, DisplayValue

links:

detailed doc for queries => https://testing-library.com/docs/queries/about/

cheetsheet => https://testing-library.com/docs/react-testing-library/cheatsheet/

which query should we use? https://testing-library.com/docs/queries/about/#priority

to identify available role name 
==> https://www.w3.org/TR/html-aria/#docconformance
==> https://www.w3.org/TR/wai-aria/#role_definitions

to identify jest matchers==> https://github.com/testing-library/jest-dom#table-of-contents

it's preferable to use getByRole so that we will be assured that our app is accessible

---------------------Describe--------------------------------------------

describe is a global method for grouping tests, takes 2 arugments similar to test
1 => description
2=> anonymous function in which we write multiple test cases.

describe('replace camel-case with space-seperation', () => {
  test('works for no capital letter', () => {
    expect(replaceCamelCase('red')).toBe('red');
  });
  test('works for one capital letter', () => {
    expect(replaceCamelCase('midnightBlue')).toBe('midnight Blue');
  });
  test('works for multiple capital letter', () => {
    expect(replaceCamelCase('mediumVioletRed')).toBe('medium Violet Red');
  });
});

-----------------------User event-------------------------------------

for simulation of user events we have to use fireevent or user event

import { render, screen, fireEvent } from '@testing-library/react';

fireEvent.action(element) ==> fireEvent.click(buttonEl)

or,

import userEvent from '@testing-library/user-event';

userEvent.action(element) ==> userEvent.click(buttonEl)

Most projects have a few use cases for fireEvent, but the majority of the time you should probably use @testing-library/user-event

detailed doc ==> https://testing-library.com/docs/ecosystem-user-event/

---------------waiting-for-disappearance--Not wraped in act() WARNING-----------------

This is bcz react updated the element(which are asseting) after test was fininshed. 

the element is getting updated asynchronously.

solution: The waitForElementToBeRemoved async helper function uses a callback to query for the element on each DOM mutation and resolves to true when the element is removed. This use MutationObserver, which gives the ability to watch for changes being made to the DOM tree. This is an async method. 

1) import { render, screen, waitForElementToBeRemoved } from '@testing-library/react';

2) make 2nd argument(function) of test global async
  eg: test('test desc', async () => {......

3) add await and waitForElementToBeRemoved no need to assert seperately this it self waits until element gets removed

 eg: await waitForElementToBeRemoved(() =>
      screen.getByText(string)
     );

more abt disappearance: https://testing-library.com/docs/guide-disappearance/#waiting-for-disappearance

-------------------------------------------------------------------




