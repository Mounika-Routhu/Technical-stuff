<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <title>JS Bin</title>  
</head>
<body>
  <a href="www.google.com" target="_blank" onclick="changeHandler(event)">click me</a>
  <div id="some-text">some text</div>
  <script type="text/javascript">
    let para2 = document.getElementById("some-text");
    const changeHandler = (e) => {
      e.preventDefault();
      para2.style.color = "red";
    }
  </script>  
</body>
</html>
---------------------------------
var p = new Promise((resolve, reject) => {
    reject(Error('The Fails!'))
  })
  .catch(error => console.log(error))
  .then(error => console.log(error))

yes, we can join multiple, 
When chaining .then’s and .catch’s it is helpful to think of them as a series of steps. Each .then receives the value returned by the previous .then (as its argument.) However, if your “step” encountered an error, any subsequent .then “steps” will be skipped until a .catch is encountered. If you want to override an error, all you need to do is return a non-error value. It can be accessed via any subsequent .then.

Hint: console.log() always return undefined.
previous catch return undefined to next then()

----
var p = new Promise((resolve, reject) => {
    reject(Error('The Fails!'))
  })
  .catch(error => console.log(error.message))
  .catch(error => console.log(error.message))

When chaining .catch’s, each one only handles errors thrown in previous .then or .catch “steps”. In this example the first .catch returns the console.log which could only be accessed via adding a .then() after both the .catch’s.

but if we throw err in catch block next catch will be invoked remember only throw will invoke catch not return

.catch’s can be used to ignore (or override) errors simply by returning a regular value.

This trick works only when there is a subsequent .then to receive the value.

----
.then(console.log) === then(data => console.log(data)) both are same

more @https://danlevy.net/javascript-promises-quiz/
-----------------
const handleClick = () => {
  key:"value"
}
If you don't use parentheses, JavaScript will interpret the curly braces as the beginning of the function body, leading to a syntax error or unexpected behavior

const handleClick = () => ({
  key:"value"
})

//omitting return keyword

const handleClick = () => {
  return{
    key:"value"
  }
}

//return keyword & curly braces we must use {} when using return keyword
---------------

useEffect() => {
update state()

return() => {
console.log("unmount or when x,y changes)"
}
}, [x,y])

No [] => infinite loop
In summary, the cleanup function returned by useEffect runs when the component unmounts and also runs before the effect is re-applied if any dependencies specified in the dependency array have changed. This behavior ensures that your component correctly cleans up any resources or subscriptions associated with the effect before applying the updated effect with new dependencies.

-------------------------

React documentation suggests favoring composition over inheritance for reusing component logic. Composition allows for more flexibility and reusability by passing components as props to other components, rather than extending them.
A key advantage of using composition in React is that it provides a clearer and more understandable component hierarchy. Components are simply assembled or composed together, rather than being tightly coupled through inheritance, making it easier to understand the relationships between components.
----------------------
<input type="submit"/> ==> gives button
-----------------------------
"lifting state up" mean in React ==> Moving state to a parent component for shared access
--------------------------------
CONTROLLED & UNCONTROLLED
Controlled components have their state managed by React (usually using state and props), while uncontrolled components manage their own state, typically using refs to directly interact with the DOM elements. This means the source of truth for uncontrolled components' data is the DOM itself, not the component state.
----------------------------------
function(x, f = () => x){
 var x;
 var y=x;
 x = 2;
 return [x,y,f()]
} 
function(1) => ans:[2,1,1]
------------
Synthetic event & native events
React wraps the native event into a SyntheticEvent

Native Events are the actual events provided by the browser's DOM API. These events vary slightly between different browsers, which can lead to inconsistencies when writing event handling code.

SyntheticEvent is a cross-browser wrapper around the browser's native event system, allowing for consistent behavior across different browsers.

Synthetic Events are objects that wrap native events, 

event.persist() ==> in event pooling synthetic event get nullified for memory saving. This prevents synthetic event from being nullified once event handler is completed. So we can still access SE asynchronously like in await & settimeout

But this isn't happening when I tested in react playground.
---------
React event handlers can return false to prevent default behavior
While returning false can sometimes work to prevent default behavior in React event handlers due to its compatibility with traditional event handling, using event.preventDefault() is the recommended and more reliable approach in React applications. It ensures consistent behavior and compatibility across all platforms supported by React.
----------------
Importance of /:
Root Path (/): Denotes the root of a website. => https://example.com/

Absolute Path: /path => Adding the / makes the path an absolute path, meaning it is relative to the root of your application(https://example.com). Replaces the current path within the same domain
FOR EAXAMPLE => /path => https://example.com/current-path => https://example.com/path

Relative Path: If you omit the leading /, it creates a relative path. relative(appends) to the current URL within the same domain. Helpful for nested routes
FOR EAXAMPLE => path => about => https://example.com/current-path => https://example.com/current-path/about 

Double Forward Slash (//): A protocol-relative URL, it will adapt to the current page's protocol  (http or https), FOR EAXAMPLE => //auth => https://example.com/current-path => https://auth

----------------------------------
diff btw throw & return: with throw, control goes to nearest catch block and current execution stops in try block. with return, it return a value or an err obj from a function to the caller code(it may have err handling code)

Also, we can use throw without try..catch, but it would lead to unhandled err & unexpected behaviour.

********Behaviour in Catch block**************
if we rethrow the error in catch both it will result in 500 status code. if we return err msg in catch block, return a 200 status code along with the error object when an error occurs. 

catch (err) {
    throw err; // Rethrowing the error
  }

catch (err) {
    return err; // Returning the error object
  }
*****************************************
---------------------------------
then().then().catch() is a common pattern for chaining asynchronous operations, where then() handles successful outcomes of previous operation and returns a new Promise and catch() handles any errors that occurred in the chain(if any err occurs the control jumps to the nearest catch()).

asyncOperation1()
  .then(result1 => {
    // Do something with result1
    return asyncOperation2(result1);
  })
  .then(result2 => {
    // Do something with result2
    return asyncOperation3(result2);
  })
  .catch(error => {
    // Handle any errors that occurred in the chain
    console.error(error);
  });
--------------------------------------------------------
How to safely save passwords in DB:
use packages like bcrypt: it will hash(mask) the password & not possible to build it back to original password. It also uses salt(random data sent as an arugument while hashing) which ensures, even when 2 user gives same password, the hash of thier passwords will be different.
---------------------------------
Why do we need useMemo: when a components state or prop changes react re-renders the entire component. If this happens some complex calculation(or time taking API) will happen again even when user don't interact with anything related to that slow function. So if we use useMemo with a dependency this complex cal will happen only when dependency changes not everytime some other state or prop changes in that component.

or when we have an object in component. A new obj will be created in memory with same value every time when component re-renders. React compares two object using Object.is(). Since prevObj reference now newObj reference are diff, react thinks there is a change in value.

so can we use useMemo everywhere: NO, bcz useMemo takes up some space in memory which causes some pref issues when we use this everywhere. so use only when needed
---------------------------------
useCallback:
--------------------------------
useEffect,useMemo, useCallback without dependency arry: run after every render
[]: onmount(useEffect), for useMemo, useCallback => first computaion will be memorired for all renders(this is helpful when we don't want to recreate unless component unmounts)
useEffect(()=>{return () => {}},[]) ==> in return funtion on ummount this return function will run. 
---------------------------------
how to avoid XSS(cross-site scripting)
X-content-type-options:nosniff => to avoid MIME sniffing, MIME sniffing means browser automatically sniffs(checks) the contents of the response when no content-type in the response headers provided or given wrong one. Eg: let's says user clicks download button to download excel sheet but gets img file in response. Browser takes the liberty to check the binary code of the response so it will be prepared what to display.

X-frame-options:DENY ==> to avoid click jacking(embeddeing our page in iframe) this happens when attackers hides some page uderneath another page(FB likes case in 2010, attacker shows some famous or interesting post user clicks on like button but underneath that like button some other FB post like button is hidden so user unintentionally likes other post)
----------------------------------
VERY IMP: concepts like why we neeed to spread an object before setState, what is referential equality, how react compares prev value with current value and re-renders(updates UI), use case for useMemo are related. check below to know more
https://blog.bitsrc.io/understanding-referential-equality-in-react-a8fb3769be0
-------------------------------
0.1 + 0.2;                    //=> 0.30000000000000004
----------------------------------
Unary Plus (+):  the + operator in front of an argument is a shorthand way to convert the argument into a numeric value.
String("123") becomes num(123) & "-123" => -123 & "hi" => NaN
true becomes 1 false becomes 0
null becomes 0
an empty string becomes 0
undefined becomes NaN
----------------------------------
let a = 0212;
console.log(a); // Outputs: 138

In many programming languages, including Python, JS, if you prefix a number with a 0, it is interpreted as an octal (base-8) number. So, 0212 is an octal number.

In octal, the digits available are 0 to 7. Therefore, 0212 is interpreted as:

2 * 8^2 + 1 * 8^1 + 2 * 8^0 = 2 * 64 + 1 * 8 + 2 * 1 = 138

to avoid this behaviour, 
"use strict";

let a = 0212; // This will throw a syntax error in strict mode

octal literals are not recommended to use in JavaScript due to confusion and potential bugs. It's better to use explicit conversion functions like parseInt() with a radix parameter to specify the base explicitly. For example:

let a = parseInt("0212", 8);
console.log(a); // Outputs: 138
----------------------------------
undo a commit local and repo (check no one has taken latest code) both steps are needed
IMP NOTE: no changes will be retained it's a delete of commits so better save your changes before resetting
git reset --hard HEAD~1 (reverts from local)
git push -f (reverts from origin)
------------------------------
npx ==> package runner tool of npm, comes with npm 5.2+, which pulls latest version of create-react-app 

npx create-react-app . => "." indicates to create react app in the same folder as we are in

earlier if we don't use --save flag, the package will be installed locally in the node_modules directory, but the information about the dependency won't be added to the package. json file. Starting from npm version 5 and later, npm introduced the automatic saving of dependencies without the need for the --save flag
-------------------------------

importance of brackets =>
"a" + false ? "b" : "c"
'b'
==> "afalse" ? "b" : "c" ==> truthy ? "b" : "c", so it will always print "b"
"a" + (false ? "b" : "c")
'ac'
--------------------------------
to display line break in text area, eg: we have let text = [1,2].join("\n") ==> <p>{text}</p>, here line break will not be shown in UI to get line break we hav to give CSS
apply css styles: white-space: pre-wrap;

---------------------------------

importance of KEY ==> Eg: if we are using same (date picker)component to render multiple times in same page, if we change in one calender all others will also change thier month and year(even if we do two way binding to value), if we provide unique key it wont happen

CSS property, values are insensite, except ID, class, element names etc...

defaultSelected => for checkbox gives boolean for whther it is seleted or not and we can even assign value to this to make a default selection for checkbox. 

diff btw selected and default selected=> both gives boolean
The defaultSelected property represents the initial (default) selection state of an element and corresponds to the selected HTML attribute. The selected property represents the current selection state and that is what a user actually sees selected in the browser. You can use this to reset some settings to defaults.

selectedIndex => return selcetd option(index or -1 if nthg is selected) or to selcet element in dropdown...index start from 0 indicates 0 is the first option 1 second and so on...-1 doesn't unselects all but still if we give selected on 1 particular option it will still be selected.

will typeOf gives reference error for undeclared variables: NO
typeof(b) // not defined before
"undefined"

will output comes after error : NO NO NO execution stops after error

print [1, 2, 3][1, 2, 3][1, 2, 3]
output[1,1,1][2,2,2][3,3,3]

write an arr method to remove all falsy values
function removeFalsy(arr){
  let res = arr.filter(el => el);
  return res;
}

let res = removeFalsy([0, 2, 3, -1, NaN, +0, -0, 12])
console.log(res);

shift(moving something => removing something from its place), unshift(opp of remove so add) diff

digits.map(el => generateHTML(el)) === digits.map(generateHTML)

function randomNumber(limit){
  return Math.floor(Math.random() * limit) + 1;
}

const digits = Array.from({length: 50}, () => [randomNumber(4), randomNumber(4)]); // [[1, 3], [3, 4].....]//length 50

// c is defined in global scope with access to a = 2
function c (){    
  console.log(a);
}

function b (){
  var a = 1;
  c(); //2 bcz, eventhough we called C here, defition function will have access to variables where it is defined(which is G scope here)
}

b();

var a = [1,2,3];
a[100] = "hi";
a.length // 101

find duplicates => [...new Set(arr)]

how to print in JS ==> window.print()

CSS variables

eslint, prettier

render prop patterns ==> A component with a render prop takes a function that returns a React element and calls it instead of implementing its own render logic.
used in react router ==> when we want to pass props to component then it is not possible with component attribute see screenshot
<Route render={() => <User name="mouni" />} />
In general:
<Data render={() => <Spinner />}>
  name: "Mounika"
</Data>

explain useMemo in code 
diff btw React.memo and useMemo increment example 
when we want to memoize expensive calculation of some part of component based on some dependencies, 
but memo is for entire component it stops entire render of component based on all state, props 

chessborad
SSR, CSR

diff btw for and forEach check img, 
for is a code block not a function so no return value.
runs defined no of times
forEach is a method but return value is undefined 
runs over no. of elements and excutes callback

how to reverse divs ==> flex - flex-direction:row-reverse

keyframes, mediaQueries

CORS in CSS

contextAPI

callBack hell how to avoid it ==> callback return callback ==> promises ==> asyn/await(cleaner way of promises)

specificity in CSS : Inline styles > IDs > Classes attributes and pseudo-classes (:hover, :focus ) > elements and pseudo-elements(::before and ::after) 

diff btw div and span 1.span is for styling a part of a text 2. span is inline div is block

how to optimize performace for user input Mounik if user entered without any delay then only fetch results for typed characters
let timer;
const debounce = (e, d) => {
    clearTimeout(timer);
    timer = setTimeout(() => {
        console.log("u pressed: " + e.target.value)
    }, d);  
}
rebouce in Js prevent excessive calls to DB for fetching res

what are new in HTML5 email attribute, placeholders, header, footer, nav, section, article, fig, figcaption, audio, video, vector graphics (circle tag)

function(){
var x = y = 200;
}();
console.log(x, y) ==> x is not defined bcz of local scope y creates implicit global so 200

alert(3+"3"+30); alter evaluates js expresion // "3330" implicit coersion
alert(3+3+3); // 9

how to make an array empty ==> 1. length=0; 2.assign array to [] 3.forEach loop pop all

Hash router
deployment on server
one way binding
<label for="male">Male</label>
<input type="radio" name="gender" id="male" value="male"><br>
semantic tags non semantic 
ans: A semantic element clearly describes its meaning to both the browser and the developer.

Examples of non-semantic elements: <div> and <span> - Tells nothing about its content.

Examples of semantic elements: <form>, <table>, and <article> - Clearly defines its content.

what is a box model?
ans: The CSS box model is essentially a box that wraps around every HTML element. 
It consists of: margins, borders, padding, and the actual content.
positions in CSS

how to pass props to nested components - 
1. prop drilling 2.context 3.REDUX 

what are HOC?

explain abt meta tag- 
The <meta> tag defines metadata about an HTML document. typically used to specify character set, page description, keywords, author of the document, and viewport settings.

Metadata is used by browsers (how to display content or reload page), search engines (keywords), and other web services.

<!DOCTYPE html>- It is an "information" to the browser about what document type to expect. In HTML 5The <!DOCTYPE> declaration is NOT case sensitive.

data trnsfer from parent to child-props, child to parent - callbacks

how to make a webpage resposive ==> mediaQueries

is setTimeout is an example for closures? YES and also hooks

what happens when we call setState in render()?- crash because of infinite renders stack over flow
how many parameters for setState - 2(updater, callback) -> more like component did update so not much use
angular vs react
In JSX most of the errors can be caught during - compilation
JSX is faster because it performs ____________ while compiling code to JavaScript ==> optimization
What is the smallest building block of ReactJS? - element
smallest js progrm - empty file, bcz, GEC, this, window element are still created
What will happen if you call setState() inside render() method? - stakeoverflow error
in react component we can return only one element
local vs session storage, how does they work, when they will get cleared.
diff btw map and foreach of array--> map has return value, Ability to chain other methods(bcz, map returns the transformed array) and forEach doesn't do this.
how to know when an object is empty
CSS position-relative how does bubbling phase work here.by default bubbling phase will work.
do we need to stringify object for local or session storage.
accesibility for color blind people.
combinaters and pseudo selectors
null vs undefined - meaning, typeOf
call,bind,apply
5..toString() and 5 .toString() ==> both are valid
Responsive Font Size: The text size can be set with a vw unit, which means the "viewport width".
eval("5*6") ==> eval error: because it's unsafe to evalute strings
"name".match() ==> for comparing with regEx "name".subStr(i, e) ==> extracts sub string or "" if string length is 0
var str = "Free Web Building Tutorials!";
var result = str.link("https://www.w3schools.com"); The link() method is not standard, and may not work as expected in all browsers.The link() method is used to display a string as a hyperlink.
How can you detect the client's browser name in JavaScript? Answer:  navigator.appName and navigator.userAgent properties.
0/0 ==> NaN, any num/0 ==> Infinity, When there is an indefinite or an infinite value during an arithmetic computation in a program, then JavaScript prints.
SASS
Array.isArray() ==> to check whther the object is an array or not
let vs const
var vs let
react interview:
1. ES6 features, what is ES6
2. Hooks --> componentWillUnmount in useEffect is imp
3. life cycle methods
4. how to add method to an array --> Object.defineProperty(obj, name(string type), {value:function(){}, options}), hasOwnPropperty --> gives false
5. find 2 missing num
6. diff btw generator function and async await --> retun value, easy syntax, yield by yield 
ans: https://towardsdatascience.com/javascript-generator-yield-next-async-await-8442d2c77185#:~:text=A%20generator%20function%20is%20executed,executed%20sequential%20await%20by%20await.&text=An%20async%20function%20can%20be,is%20good%20to%20know%20stuff.
7. event loop
8. prototypal inheritance
-----------------Avoid copying props into state! This is a common mistake----------------
The problem is that it’s both unnecessary (you can use this.props.color directly instead), and creates bugs (updates to the prop won’t be reflected in the state).

class App extends React.Component{
  constructor(props){
    super(props);
    this.state = {
      name: "mouni"
    }
  }
  render(){
    return(
      <div>
        <button onClick={() => this.setState({name:"Ammu"})}>changeName</button>
        <Name name={this.state.name} />
      </div>  
    )
  }  
}

class Name extends React.Component{
  constructor(props){
    super(props);
    this.state = { name: "" }
    //this.state = { name: props.name } // if we do this when prop changes in App by button onclick that prop change won't reflect here.. 
	//because state obj will be created only once in contructor in mounting phase in updating phase contructor function won't come again
  }
  static getDerivedStateFromProps(props, state){
    return{
      name: props.name
    }
  }
  render(){
    return <div>My name is {this.state.name}</div>
  }
}

ReactDOM.render(<App />, document.getElementById("root"))
==========================================================useEffect(inprogress)========
class App extends React.Component{
  constructor(props){
    super(props);
    this.state = {
      name: "mouni",
      show: true
    }
  }
  render(){
    return(
      <div>
        <button onClick={() => this.setState({name:"Ammu"})}>changeName</button>
        <button onClick={() => this.setState({show:false})}>RemoveName</button>        
        {this.state.show && <Name name={this.state.name} />}
      </div>  
    )
  }  
}

const Name = (props) => {
  React.useEffect( () => {
    console.log("ComponentDidMount or update")
    return () => {
      console.log("ComponentWillUnMount")
    }
  },[props.name])
  return <div>My name is {props.name}</div>
}

ReactDOM.render(<App />, document.getElementById("root"))
===================================================How to add property to arr=============
here arrow function doesn't be optimal because this keyword represnts the object where it is defined and there is no binding of "this" here.

const arr = [1,2,3,4];

function findEven () {  
  const res = this.find((el) => el%2 === 0)
  return res || "no even num found";
}

Object.defineProperty(arr, "findEven", {value: findEven })

console.log(arr.findEven())

console.log(arr.hasOwnProperty(findEven))//false since it is not a direct property

const arr2 = [5,6,7,8,9];

console.log(arr.findEven.call(arr2));
=======================advanced===============================
all about hoisting. Why it is a default behaviour in JS ==> 

Ans:As Stoyan Stefanov explains in "JavaScript Patterns" book, the hoisting is result of JavaScript interpreter implementation.

The JS code interpretation performed in two passes. During the first pass, the interpreter processes variable and function declarations.

The second pass is the actual code execution step. The interpreter processes function expressions and undeclared variables.

Thus, we can use the "hoisting" concept to describe such behavior.


Z()//here we can't access beacuse it won't be in global namespace

var p = functionZ(){
	z() // here Z is accesible since it is in local scope
}

functionZ(){
}

Z()//calls a function

new Z() // creates a instance of Z(). It is function constructor.

z = () => {
}

z() // even if it is an arrow function, it will get called.
new Z() // we can't create new instance of Z here. because there is no binding of this in arrow functions.
----------------------------------
a = {a:10, b:{c:3, d:22}}

var b = Object.assign({}, a) // clones, b === a ==> false

var b = Object.assign(a) // b === a ==> true since first object itself is "a"

b.b === a.b //true since this wont do deep cloning

we have lodash library for deep clone...they check key's value is object or not and will follow recursion to clone each nested object.
----------
how memoization works ==> with closure we can reduce memory. refere below code
function memoizedAddTo256(){
  var cache = {};

  return function(num){
    if(num in cache){
      console.log("cached value");
      return cache[num]

    }
    else{
      cache[num] = num + 256;
      return cache[num];
    }
  }
}

var memoizedFunc = memoizedAddTo256();

memoizedFunc(20); // Normal return
memoizedFunc(20); // Cached return
---------------
how to call all promises parallely ==> Promise.all(a,b,c) // here even 1 promise fail execution will stop.

ComponentWillUnmount in useEffect hook.

how dispatch work in redux.

redux flow.
-----------------------
axios.().then(() => return())
	.then(() => return())
	.then(() => return())

yes we can do above for chaining promises.
-------------------------ways to check for property in an object---------------
https://www.javascripttutorial.net/object/javascript-check-if-property-exists/

1. hasOwnProperty(): Note that the hasOwnProperty() looks for the property in the own properties of the object.
2. in operator: Unlike the hasOwnProperty() method, the in operator looks for the property in both own properties and inherited properties of the object.
3. Compare the property with undefined to check if a property exists only when you are sure that the initial value of the property is not undefind
-----------------------implicit globals--------------------
function foo() {
    var variable1, variable2;

    variable1 = 5;
    varaible2 = 6; // typo, this line creates an implicit global since there is no declaration keyword, this varibale will be added to global object
    return variable1 + variable2;
}
console.log(foo());     // NaN
console.log(varaible2); // 6 // this wil work only if we run the funtion before unless, error
=============================================
for(var i=0;i<5;i++){
  setTimeout(function(){
    console.log(i)// prints 5 for 5 times to avoid this we need closures // here all i's are same for all callback instances
  }, 100)
}

for(var i=0;i<5;i++){
  function inner(){
    var j = i
    setTimeout(function(){
    	console.log(j) // 0 1 2 3 4 because each callback instance gets access to j variable(lexical scope)
    }, 100)
  }
  inner();  
}
=========================================
const p1 = new Promise((resolve, reject) => {
  resolve("foo");
})

const p2 = new Promise((resolve, reject) => {
  reject("bar");
});

console.log("bip");

p1.then((val) => {
  console.log(val);
  return p2;
})
.then(val => {
  console.log("baz")
})
.catch(err => {
  console.log(err);
})

console.log("bop");

ans: 
"bip"
"bop"
"foo"
"bar" // since p2 is rejected and returned in p1's then block...2nd then block won't get executed, catch block will excecuted.
==================================
#foo{
    width: 100px;
    padding: 15px;
    margin: 5px;
    border: 1px solid black;
}

#bar{
    width: 100px;
    padding: 15px;
    margin: 5px;
    box-sizing: border-box; //content-box this is default, takes width, height as mentioned below.
    border: 1px solid black;
}

By default, the width and height of an element is calculated like this:

width + padding(left+right) + border(left+right) = actual width of an element
height + padding(top+bottom) + border(top+bottom) = actual height of an element

This means: When you set the width/height of an element, the element often appears bigger 
than you have set (because the element's border and padding are added to the element's specified width/height).

The box-sizing property allows us to include the padding and border in an element's total width and height.(refer computed in screenshots)

Key note: which one will be wider box-sizing:content-box? ans: foo because, above explanation ==> width + padding + border = actual width of an element(this doesn't count margin)
(refer computed in screenshot) 
#foo{
    width: 100px;
    padding: 15px;
    margin: 0px;
    border: 1px solid black;
}

#bar{
    width: 100px;
    padding: 10px;
    margin: 5px;
    border: 1px solid black;
}
================react, redux(verification required)===========================
React Components are saved in Inside js/components/.
The react component returns Multiple Elements.
Babel is Both Compiler and Transpilar.
Webpack is a module bundler.
What port is the default where the webpack-dev-server will run? 8080
It is sufficinet to have keys Unique among the siblings only
key should be given to react element not HTML element.
Which of the following is the correct data flow sequence of flux concept? Action->Dispatcher->Store->View
A createStore function can have three arguments. 3 The following is the syntax : createStore(reducer, [preloadedState], [enhancer])
A store is an immutable object tree in Redux.
Redux-Devtools provide us debugging platform for Redux apps. It allows us to perform time-travel debugging and live editing.
==============JQUERY(verification required)======
jQuery is a JavaScript Library.jQuery greatly simplifies JavaScript programming.jQuery is easy to learn.
Basic syntax is: $(selector).action()
All selectors in jQuery start with the dollar sign and parentheses: $().
All the different visitors actions that a web page can respond to are called events.
=========================
"1101011011011".split("0", 4) ans:  ["11", "1", "11", "11"]
================adding property to prototype==================
function Student() {
    this.name = 'John';
    this.gender = 'M';
}

var studObj = new Student();

Student.prototype.sayHi= function(){
    alert("Hi");
};

var studObj1 = new Student();
var proto = Object.getPrototypeOf(studObj1);  // returns Student's prototype object
            
alert(proto.constructor); // returns Student function 

-----
const obj = {};

const proto = Object.getPrototypeOf(obj);

const proto1 = obj.__proto__

proto.name = "mounika"

proto1.location = "bangalore"

console.log(obj.name, obj.location);
---

Chrome and Firefox denotes object's prototype as __proto__ which is public link whereas internally it reference as [[Prototype]]. Internet Explorer does not include __proto__. Only IE 11 includes it.

The getPrototypeOf() method is standardize since ECMAScript 5 and is available since IE 9.
================
const [a,b,...c] = [1,2,3,4,5]; //rest operator

const [d,e,f] = [1,2,3,4,5,6]

console.log(a,b,c,d,e,f) 
output:

1
2
[3, 4, 5]
1
2
3
=============
which datatypes can be destructed ==> Arrays, Objects, strings.
==========Async await===========
function getUser() {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve({name:"mouni"});
    }, 2000);
  });
}

async function asyncCall() { //async should be given infront of function keyword const asyncCall = async function(){}
  console.log('started');
  const result = await getUser();
  //console.log(result.name);
  return result;
}

asyncCall().then(res => console.log(res.name));
async/await is part of ECMAScript 2017 and is not supported in Internet Explorer and older browsers, so use with caution.
======================================
IMB hacker rank MCQ: https://www.skptricks.com/2018/07/react-js-quiz-react-js-interview.html
https://www.w3docs.com/quiz/question/ZGt1
https://tutorialsinhand.com/aptitudes/reactjs-mcq/reactjs-concepts/reactjs-mcq-set-1.aspx
==========================
function outer(){
    var num =2;
    console.log(num) //2
    function inner() {
        console.log(num)//undefined-hoisted
        num++; 
        console.log(num) //NaN undefined++ ==> NaN
        var num = 3;
        console.log(num) // 3 initialized
    }
    inner();
}
outer();
console.log(num) // reference error: not defined
=================================
for (var x = 0; x < 5; x++);{ // if let creates a block variable and not accessible outside x is not defined in next line. const ==> typeError assigment to const var error
	cl(x)
}

here ; represents end of statement hence only for loop if will run and makes x = 5 since we used var it will be golbal variable hence accesible outside